@page "/"
@inject IJSRuntime jsRuntimeService

<PageTitle>The Anime Index</PageTitle>
<link rel="preconnect" href="https://fonts.googleapis.com">
<link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
<link href="https://fonts.googleapis.com/css2?family=Alexandria:wght@400;600;700&display=swap" rel="stylesheet">

<div class="container-global">

    <div class="container-header">
        <div class="header">
            <h1>The Anime Index</h1>
            <span class="subheading">the worlds largest repository of anime</span>
        </div>

        @*Search Bar*@
        <div class="container-search">
            <div class="el el--1">
                <input type="text" placeholder="Search..." @bind-value="UserInput">
            </div>
            <div class="el el--1-btn ">
                <button @onclick='() => GetAnime(UserInput)'>
                    <svg xmlns="http://www.w3.org/2000/svg" width="40" height="40" fill="#000000" viewBox="0 0 256 256"><rect width="256" height="256" fill="none"></rect><circle cx="116" cy="116" r="84" fill="none" stroke="#000000" stroke-linecap="round" stroke-linejoin="round" stroke-width="16"></circle><line x1="175.4" y1="175.4" x2="224" y2="224" fill="none" stroke="#000000" stroke-linecap="round" stroke-linejoin="round" stroke-width="16"></line></svg>
                </button>
            </div>
        </div>
    </div>

    <div class="container-content">
        @*Cover Image*@
        <div class="el el--2">
            <div class="container-img">
                @if (Image != null)
                {
                    <img id="anime-img" src="@Image" alt="Anime artwork" />
                    <div id="anime-name">
                        <hr />
                        <span id="">@Name</span>  
                    </div>
                }
            </div>
        </div>

        @*Fact Cards*@
        <div class="el el--3" onclick="touchFact(event)">
            <div class="listOfFacts">
                @((MarkupString)Markup!)
            </div>
        </div>
    </div>
</div>
@code {
    // User input
    private string? UserInput { get; set; }
    public string? UserOutput { get; set; }
    public string? UserInputFixed { get; set; }

    // Creates a TextInfo based on the "en-US" culture.
    public TextInfo myTI = new CultureInfo("en-US", false).TextInfo;

    // Inserted markup
    public string? Markup { get; set; }

    public string factClass { get; set; } = "fact-collapsed";

    // Query attributes
    public string? Name { get; set; }
    public string? Image { get; set; }
    private int FactNumber { get; set; }
    public List<string> Facts = new List<string>();

    // ---------------------------------------------

    // Get anime
    public async void GetAnime(string input)
    {
        UserInputFixed = FixInputString(input);

        // Base URL
        string baseUrl = $"https://anime-facts-rest-api.herokuapp.com/api/v1/{UserInputFixed}";

        try
        {
            using (HttpClient client = new HttpClient())
            {
                using (HttpResponseMessage res = await client.GetAsync(baseUrl))
                {
                    using (HttpContent content = res.Content)
                    {
                        var data = await content.ReadAsStringAsync();

                        if (data != null)
                        {
                            // Parse  data into a object
                            var dataObj = JObject.Parse(data);

                            // Reset values
                            if (Facts.Count > 0)
                            {
                                Name = "";
                                Image = "";
                                Markup = "";
                                FactNumber = 0;
                                Facts.Clear();
                            }

                            UserOutput = OutputName(input);

                            // Add values to variables
                            Name = UserOutput;                          // Name
                            Image = $"{dataObj["img"]}";                // Image
                            foreach (var item in dataObj["data"]!)      // Facts
                            {
                                FactNumber += 1;
                                Facts.Add($"<div class=\"fact-collapsed\"><h6>Fact: {FactNumber}</h6><p>{item["fact"]!.ToString()}</p></div>");
                                //Facts.Add($"<div class=\"fact\"><h6>Fact: {FactNumber}</h6><p>{item["fact"]!.ToString()}</p></div>");
                                //Facts.Add(item["fact"]!.ToString());
                            }


                            InsertHTML(Facts);
                        }
                        else
                        {
                            Console.WriteLine("Error: No data.");
                        }
                    }
                }
            }
        }
        catch (Exception e)
        {
            Console.WriteLine(e.Message);
        }
    }

    public void InsertHTML(List<string> facts)
    {
        foreach (string item in facts)
        {
            Markup = Markup + item;
        }
        StateHasChanged();
    }

    public string FixInputString(string inputName)
    {
        inputName = inputName.Replace(@" ", "_");
        return myTI.ToLower(inputName);
    }

    public string OutputName(string inputName)
    {
        inputName = inputName.Replace(@"_", " ");
        return myTI.ToTitleCase(inputName);
    }

}
