@page "/"
@inject IJSRuntime jsRuntimeService

<PageTitle>The Anime Index</PageTitle>
<link rel="preconnect" href="https://fonts.googleapis.com">
<link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
<link href="https://fonts.googleapis.com/css2?family=Alexandria:wght@400;600;700&display=swap" rel="stylesheet">

@*List of titles that appear in search*@
<datalist id="titles">
    <option value="Bleach" />
    <option value="Attack on Titan" />
    <option value="Dragon Ball" />
    <option value="One Piece" />
    <option value="Demon Slayer" />
    <option value="Gintama" />
    <option value="Jujutsu Kaisen" />
    <option value="Hunter X Hunter" />
</datalist>

<div class="container-global">

    @*Header*@
    <div class="container-header">
        <div class="header">
            <h1>The Anime Index</h1>
            <span class="subheading">the worlds largest repository of anime</span>
        </div>

        @*Search Bar*@
        <div class="container-search">
            <div class="el el--1">
                <input type="text" placeholder="Search..." value="@input.Query" list="titles" @oninput="@UpdateQuery" @onkeydown="@KeyPress">
            </div>
            <div class="el el--1-btn ">
                <button @onclick='() => RunQuery(input.Query)'>
                    <svg xmlns="http://www.w3.org/2000/svg" width="40" height="40" fill="#000000" viewBox="0 0 256 256"><rect width="256" height="256" fill="none"></rect><circle cx="116" cy="116" r="84" fill="none" stroke="#000000" stroke-linecap="round" stroke-linejoin="round" stroke-width="16"></circle><line x1="175.4" y1="175.4" x2="224" y2="224" fill="none" stroke="#000000" stroke-linecap="round" stroke-linejoin="round" stroke-width="16"></line></svg>
                </button>
            </div>

        </div>
    </div>

    <div class="container-content">
        @*Cover Image*@
        <div class="el el--2">
            <div class="container-img">
                @if (selectedTitle.Image != null)
                {
                    <img src="@selectedTitle.Image" alt="Anime artwork" />
                }
                <div id="anime-name">
                    <hr />
                    <span id="">@selectedTitle.OutName</span>
                </div>
            </div>
        </div>

        @*Fact Cards*@
        <div class="el el--3" onclick="touchFact(event)">
            <div class="listOfFacts">
                @((MarkupString)selectedTitle.Markup!)
            </div>
        </div>
    </div>

</div>

@code {
    // User input
    UserInput input = new UserInput();
    // Selected object
    AnimeTitle selectedTitle = new AnimeTitle();
    // List of objects
    Rootobject root = new Rootobject();

    // ---------------------------------------------

    // Run on page initialization
    protected async override Task OnInitializedAsync()
    {
        await AddTitles();
    }

    // Get response
    async Task AddTitles()
    {
        // Base URL (based of the heroku hosted API, not available since 28/11/22)
        //string baseUrl = $"https://anime-facts-rest-api.herokuapp.com/api/v1/{FixInputString(input)}";

        // Mock API result
        string baseUrl = "https://anime-facts.azure-api.net/v1/get-facts";

        // Get response
        try
        {
            using (HttpClient client = new HttpClient())
            {
                using (HttpResponseMessage res = await client.GetAsync(baseUrl))
                {
                    using (HttpContent content = res.Content)
                    {
                        var data = await content.ReadAsStringAsync();

                        if (data != null)
                        {
                            // Convert JSON objects into AnimeTitle objects
                            root.Shows = JsonSerializer.Deserialize<List<AnimeTitle>>(data)!;
                        }
                        else
                        {
                            throw new ArgumentException("Error: No returned data.");
                        }
                    }
                }
            }
        }
        catch (Exception e)
        {
            Console.WriteLine(e.Message);
        }
    }

    // Listen for 'Enter' key press
    void KeyPress(KeyboardEventArgs args)
    {
        if (args.Key.Equals("Enter") && input.Query != null)
        {
            RunQuery(input.Query);
            StateHasChanged();
        }
    }

    // Update query string per keyboard input
    void UpdateQuery(ChangeEventArgs args)
    {
        // Updates query string with every key press
        input.Query = args.Value?.ToString();
    }

    // Query against root object list
    void RunQuery(string input)
    {
        if (input.Equals("") || input.Equals(null))
        {
            selectedTitle = new AnimeTitle();
            selectedTitle.OutputName("Invalid Title");
        }
        else
        {
            // Corrects input to include '_' and lowercase
            input = selectedTitle.FixInputString(input);

            foreach (AnimeTitle title in root.Shows!)
            {
                // Matches title to input and creates copy
                if (title.Name!.Equals(input))
                {
                    selectedTitle = new AnimeTitle();
                    selectedTitle = title;
                }
            }

            // Insert markup and correct output name to remove '_' and uppercase
            selectedTitle.InsertHTML();
            selectedTitle.OutputName(input);
        }
    }
}
